_include:
  - (quartical)stimela_cabs.yaml



opts:
  log:
    dir: logs
    nest: 2
  backend:
    select: native


1GC:
  name: 1gc
  info: First generation calibration using QuartiCal

  assign:
    ms: /home/lbester/projects/MOON/l.ms

  inputs:
    basedir:
      dtype: str
      info: Location to write gain table
    model-column:
      dtype: str
      default: MODEL_DATA


  steps:
    kgb:
      cab: quartical
      info: GKB on the primary where
            G = time variable complex gain,
            K = per scan delay
            B = frequency variable complex gain (bandpass)
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: '0'
        input_ms.freq_chunk: '0'
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID]
        input_ms.select_fields: [1]
        # input_ms.select_corr: [0, 3]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G,K,B,P]
        solver.iter_recipe: [50,50,50,0,25,25,25,0,15,15,15,0,5,5,5,0]
        solver.propagate_flags: false
        solver.robust: true
        solver.threads: 16
        solver.reference_antenna: 4
        output.gain_directory: '{recipe.basedir}/gkb_coarse_binf.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.products: [corrected_data]
        output.columns: [CORRECTED_DATA_QCAL]
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [[G,K,B],[G,K,B,P]]
        mad_flags.enable: false
        dask.threads: 2
        dask.scheduler: threads
        G.type: diag_complex
        G.time_interval: 0
        G.freq_interval: 0
        K.type: delay
        K.time_interval: 0
        K.freq_interval: 0
        K.initial_estimate: true
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 8
        B.respect_scan_boundaries: false
        P.type: parallactic_angle
        P.time_interval: 1
        P.freq_interval: 0

    phasecal:
      cab: quartical
      info: Delay and offset on the secondary
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: '0'
        input_ms.freq_chunk: '0'
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
        input_ms.select_fields: [2]
        # input_ms.select_corr: [0, 3]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, D, P]
        solver.iter_recipe: [0, 0, 0, 100, 0]
        solver.propagate_flags: false
        solver.robust: false
        solver.threads: 16
        solver.reference_antenna: 4
        output.gain_directory: '{recipe.basedir}/delay_and_offset.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.products: [corrected_data]
        output.columns: [CORRECTED_DATA_QCAL]
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [[G,K,B,D,P],[G,K,B,D]]
        mad_flags.enable: false
        dask.threads: 2
        dask.scheduler: threads
        G.type: diag_complex
        G.time_interval: 0
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/gkb_course_binf.qc/G'
        K.type: delay
        K.time_interval: 0
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/gkb_course_binf.qc/K'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/gkb_course_binf.qc/B'
        D.type: delay_and_offset
        D.time_interval: 0
        D.freq_interval: 0
        D.initial_estimate: false
        P.type: parallactic_angle
        P.time_interval: 1
        P.freq_interval: 0

    crosshand_phase:
      cab: quartical
      info: Crosshand phase on the polcal
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: '0'
        input_ms.freq_chunk: '0'
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
        input_ms.select_fields: [0]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, D, C, P]
        solver.iter_recipe: [0, 0, 0, 0, 100, 0]
        solver.propagate_flags: false
        solver.robust: false
        solver.threads: 16
        solver.reference_antenna: 4
        output.gain_directory: '{recipe.basedir}/crosshand_phase.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.products: [corrected_data]
        output.columns: [CORRECTED_DATA_QCAL]
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [[G,K,B,D,P],[G,K,B,D]]
        mad_flags.enable: false
        dask.threads: 2
        dask.scheduler: threads
        G.type: diag_complex
        G.time_interval: 0
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/gkb_course_binf.qc/G'
        K.type: delay
        K.time_interval: 0
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/gkb_course_binf.qc/K'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/delay_and_offset.qc/B'
        D.type: delay_and_offset
        D.time_interval: 0
        D.freq_interval: 0
        D.initial_estimate: false
        D.load_from: '{recipe.basedir}/delay_and_offset.qc/D'
        C.type: crosshand_phase_null_v
        C.solve_per: array
        C.time_interval: 0
        C.freq_interval: 1
        P.type: parallactic_angle
        P.time_interval: 1
        P.freq_interval: 0


selfcal:
  name: Lunocal
  info: Self-calibration

  assign_based_on:
    obs:
      'cals':
        ms: /home/lbester/projects/MOON/l.ms
      'luno':
        ms: /home/lbester/projects/MOON/l_moon.ms

  inputs:
    obs:
      default: sgra
      choices: ['sgra','gcx17','gcx30']
    data-column:
      default: DATA
    sigma-column:
      default: SIGMA_SPECTRUM
      info: Original std of noise used to construct weights
    model-column:
      dtype: str
      default: MODEL_DATA_PFB
    nthreads:
      dtype: int
      default: 32
    overwrite:
      dtype: bool
      default: false
    tint:
      dtype: int
      default: 1
      info:
        Time solution interval for delay_and_offset

  steps:
    selfcal1:
      cab: quartical
      info: Perform a round of phase + delay selfcal + MAD flagging
      params:
        input_ms.path: '{recipe.ms}'
        input_ms.data_column: =recipe.data-column
        # input_ms.sigma_column:   #=recipe.sigma-column
        input_ms.time_chunk: 28
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [SCAN_NUMBER,FIELD_ID,DATA_DESC_ID]
        input_ms.select_corr: [0, 3]
        input_model.recipe: =recipe.model-column
        input_model.apply_p_jones: false
        solver.terms: [K]
        solver.iter_recipe: [50,30,20,10,5]
        solver.propagate_flags: true
        solver.robust: true
        solver.threads: 2
        solver.reference_antenna: 56
        output.gain_directory: 'output/gains/{recipe.obs}/stage1.qc'
        output.log_directory: 'output/{recipe.obs}/logs.qc'
        output.overwrite: =recipe.overwrite
        output.products: [residual]
        output.columns: [RESIDUAL]
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gains: [K]
        mad_flags.enable: true
        mad_flags.whitening: native
        mad_flags.threshold_bl: 5.5
        mad_flags.threshold_global: 0
        mad_flags.max_deviation: 0
        dask.threads: 24
        dask.scheduler: threads
        K.type: delay_and_offset
        K.interp_method: 2dlinear
        K.interp_mode: ampphase
        K.time_interval: =recipe.tint
        K.freq_interval: 0
        K.initial_estimate: false
