opts:
  backend:
    select: kube
    kube:
      enable: true
      dir: /mnt/data/pfb-test
      namespace: rarg-test-compute
      volumes:
        rarg-test-compute-efs-pvc:
          mount: /mnt/data

      user:
        uid: 1000
        gid: 1000

      predefined_pod_specs:
        admin:
          nodeSelector:
            rarg/node-class: admin
        scheduler:
          nodeSelector:
            rarg/node-class: compute
            rarg/instance-type: m6i.large
            rarg/capacity-type: ON_DEMAND
        small:
          nodeSelector:
            rarg/node-class: compute
            rarg/instance-type: c6in.2xlarge
            rarg/capacity-type: ON_DEMAND
        medium:
          nodeSelector:
            rarg/node-class: compute
            rarg/instance-type: c6in.8xlarge
            rarg/capacity-type: ON_DEMAND
        large:
          nodeSelector:
            rarg/node-class: compute
            rarg/instance-type: c6in.24xlarge
            rarg/capacity-type: ON_DEMAND

      job_pod:
        memory:
          limit: 0
        cpu:
          request:
            0
      dask_cluster:
        num_workers: 1
        scheduler_pod:
          type: scheduler
          memory:
            limit: "3Gi"
          cpu:
            request:
              1
        worker_pod:
          memory:
            limit: 0
          cpu:
            request:
              0

      env:
        NUMBA_CACHE_DIR: /mnt/data/pfb-test
        CONFIGURATT_CACHE_DIR: /mnt/data/pfb-test
        JAX_ENABLE_X64: 'True'
        JAX_PLATFORMS: 'cpu'
        LD_LIBRARY_PATH: '/usr/local/lib'

image:
  steps:
    init:
      backend:
        select: singularity
        singularity:
          rebuild: true
          bind_dirs:
            /home/bester/numba_cache: rw
          env:
            NUMBA_CACHE_DIR: /home/bester/numba_cache

    grid:
      backend:
        select: kube
        kube:
          enable: true
          env:
            NUMBA_NUM_THREADS: '30'
          job_pod:
            type: medium
            memory:
              limit: "27Gi"
            cpu:
              request: 28
          dask_cluster:
            enable: true
            num_workers: 2
            name: pfb-test-cluster
            threads_per_worker: 1
            worker_pod:
              type: medium
              memory:
                limit: "27Gi"
              cpu:
                request: 28
      params:
        fits-mfs: false
        fits-cubes: false
        nworkers: 2
        nthreads: 30


    sara:
      backend:
        select: kube
        kube:
          enable: true
          env:
            NUMBA_NUM_THREADS: '90'
            NUMEXPR_NUM_THREADS: '90'
          job_pod:
            type: large
            memory:
              limit: "170Gi"
            cpu:
              request: 50
          dask_cluster:
            enable: false
      params:
        fits-mfs: false
        fits-cubes: false
        nthreads: 90

    pull_model:
      cab: s3tolocal
      backend:
        select: native
      params:
        source: s3://rarg-test-data/hi_combined_bda_I_main_model.mds
        dest: /home/bester/projects/ESO137/from_aws/hi_combined_bda_I_main_model.mds

    compare_models:
      cab: compmodels
      backend:
        select: native
        native:
          virtual_env: ~/.venv/pfb
      params:
        model_local: /scratch/bester/hi_combined_bda_I_main_model.mds
        model_remote: =previous.dest

cabs:
  s3tolocal:
    name: s3tolocal
    command: aws s3 cp --recursive
    policies:
      positional: true
    inputs:
      source:
        info: The location to fetch the model from
        dtype: URI
        required: true

    outputs:
      dest:
        info: The location to place the model
        required: true
        dtype: Directory
        mkdir: true

  compmodels:
    name: compmodels
    flavour: python-code
    command: |
      import numpy as np
      import xarray as xr
      from pfb.utils.misc import model_from_mds

      model1 = model_from_mds(model_local)
      model2 = model_from_mds(model_remote)
      model1 -= model2  # diff
      model1 += 1.0     # for relative tolerance
      try:
        assert np.allclose(model1, 1.0, atol=epsilon, rtol=epsilon)
      except:
        raise ValueError("Models don't match")

      print('Success!')

    inputs:
      model_local:
        info: Model obtained by executing locally
        required: true
        dtype: str
      model_remote:
        info: Model obtained by executing remotely
        required: true
        dtype: str
      epsilon:
        info: Precision with which to compare models
        default: 1e-4
        dtype: float
    outputs:
      {}
