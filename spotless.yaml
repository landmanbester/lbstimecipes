_include:
  - (pfb)stimela_cabs.yml

opts:
  log:
    dir: logs
    nest: 2

spotless:
  name: SPOTLESS
  info: spotless deconvolution algorithm

  assign:
    ldir: DIRNAME(recipe.output_filename)

  inputs:
    ms:
      required: true
      aliases: ['*.ms']
      info:
        Path to MS
    output-filename:
      required: True
      aliases: ["*.output-filename"]
      info:
        Basename of ouput products
    log-directory:
      required: true
      aliases: ["*.log-directory"]
      info:
        Directory in which to place logs
    nband:
      dtype: int
      required: True
      aliases: ['*.nband']
      info:
        Number of imaging bands (typically divisible by 2)
    cpi:
      dtype: int
      default: 32
      aliases: ['*.channels-per-image']
      info:
        Number of channels per image.
        Default (-1, 0, None) -> dataset per spw.
        Only applied to init and degrid steps.
    ipi:
      dtype: int
      default: -1
      aliases: ['*.integrations-per-image']
      info:
        Number of time integrations per image.
        Default (-1, 0, None) -> dataset per scan.
        Only applied to init and degrid steps.
    fov:
      dtype: float
      default: 3.0
      info:
        Field of view in degrees
    srf:
      dtype: float
      default: 2
      info:
        Will over-sample Nyquist by this factor at max frequency
    data-column:
      dtype: str
      default: CORRECTED_DATA
      info:
        Which column to image
    weight-column:
      dtype: str
      default: WEIGHT_SPECTRUM
    model-column:
      dtype: str
      default: MODEL_DATA
    outputs:
      dtype: str
      default: mMrRiI
      info:
        Output products of the restore worker.
        (m)odel, (r)esidual, (i)mage, (c)lean beam, (d)irty, (f)ft_residuals
        Captitals for cubes, lower case for MFS images.
    nthreads:
      dtype: int
      default: 32
      info:
        Total number of threads to use.
        You typically want to use a multiple of nband
        for optimal resource utilisation.
    niter:
      dtype: int
      default: 12
      info:
        Number of major iterations
    l1reweight-from:
      dtype: int
      default: 6
      info:
        When to start L1 reweigting
    rmsfactor:
      dtype: float
      default: 0.65
      info:
        Set's the strength of the regulariser in terms of rms.
        Usually between 0.5 and 1.5 with larger values corresponding to stronger regularisation.
        0.65 is sometimes the magic number
    positivity:
      dtype: int
      default: 1
      info:
        Set to zero to switch off positivity constraint.
    tol:
      dtype: float
      default: 0.0005
      info:
        Stop the deconvolution when |model-modelp|/|modelp| < tol
    robustness:
      dtype: float
      default: -1
      info:
        Robustness value for Briggs weighting
    overwrite:
      dtype: bool
      default: false
      aliases: ['*.overwrite']
      info:
        Allow overwriting existing data products
    product:
      default: I
      info:
        Stokes product

  steps:
    init:
      cab: pfb.init
      info:
        Precompute visibilities for output products.
        In this case simply the Stokes I visibilities (default)
      # assign:
      #   a: 1.1
      params:
        data-column: =recipe.data-column
        weight-column: =recipe.weight-column
        max-field-of-view: =recipe.fov * 1.1
        scheduler: distributed
        nworkers: =recipe.nband
        nthreads-dask: =recipe.nthreads//recipe.nband
        nvthreads: 2
        overwrite: =recipe.overwrite
        channels-per-image: =recipe.cpi
        integrations-per-image: =recipe.ipi

    grid:
      cab: pfb.grid
      info:
        Flip visibilties into image space data products.
      params:
        robustness: =recipe.robustness
        field-of-view: =recipe.fov
        scheduler: distributed
        nworkers: =recipe.nband
        nthreads-dask: 2
        nvthreads: =recipe.nthreads//recipe.nband
        overwrite: =recipe.overwrite

    deconv:
      cab: pfb.spotless
      info:
        Deconvolve with spotless worker
      params:
        niter: =recipe.niter
        l1reweight-from: =recipe.l1reweight-from
        rmsfactor: =recipe.rmsfactor
        positivity: =recipe.positivity
        pd-maxit: 400
        pd-tol: 3e-4
        pd-report-freq: 50
        pd-verbose: 2
        tol: =recipe.tol
        pm-maxit: 250
        pm-tol: 5e-4
        scheduler: threads
        nthreads-dask: =recipe.nband
        nvthreads: =recipe.nthreads//recipe.nband
        bases: self,db1,db2,db3

    restore:
      cab: pfb.restore
      info:
        Create image products (including cubes)
      params:
        nvthreads: =recipe.nthreads
        outputs: =recipe.outputs
        overwrite: =recipe.overwrite

    degrid:
      cab: pfb.degrid
      info:
        Render component model to visibilities
      params:
        model-column: =recipe.model-column
        nthreads-dask: =recipe.nband
        nvthreads: =recipe.nthreads//recipe.nband
        channels-per-image: =recipe.cpi
        integrations-per-image: =recipe.ipi
        mds: '{recipe.output-filename}_{recipe.product}_main_model_{recipe.niter}.mds'  # how to do this better?

