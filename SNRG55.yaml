_include:
  - (pfb)stimela_cabs.yml

opts:
  log:
    dir: logs
    nest: 2

init:
  name: spotless
  info: Initialise Stokes data products for a single dataset

  inputs:
    ms:
      dtype: List[str]
      required: true
    basedir:
      dtype: str
      required: true
    nthreads-dask:
      dtype: int
      default: 4
    nvthreads:
      dtype: int
      default: 2
    data-column:
      default: DATA
      dtype: str
    weight-column:  # not used by default
      dtype: str
    flag-column:
      default: FLAG
      dtype: str

  steps:
    init_obs:
      cab: pfb.init
      info:
        Initialise imaging data products
      params:
        ms: =recipe.ms
        output-filename: '{recipe.basedir}/data'
        log-directory: '{recipe.basedir}/logs'
        data-column: =recipe.data-column
        flag-column: =recipe.flag-column
        nthreads-dask: =recipe.nthreads-dask
        nvthreads: =recipe.nvthreads


init_loop:
  info: init loop over datasets

  assign:
    obs: F000

  for_loop:
    var: obs
    over: [F000, F001, F005, F01]
    # scatter: 4  # to do it in parallel

  # observation specific settings in subsections
  assign_based_on:
    obs:
      F000:
        ms: [msdir/SNR_G55_10s.calib.ms]
      F001:
        ms: [msdir/SNR_G55_10s.calib.unflagged_0.001.ms]
      F005:
        ms: [msdir/SNR_G55_10s.calib.unflagged_0.005.ms]
      F01:
        ms: [msdir/SNR_G55_10s.calib.unflagged_0.01.ms]

  inputs:
    nthreads-dask:
      dtype: int
      default: 4
    nvthreads:
      dtype: int
      default: 2
    data-column:
      default: DATA
      dtype: str
    weight-column:
      default: UNSET  # not used by default
      dtype: str
    flag-column:
      default: FLAG
      dtype: str

  steps:
    make_xds:
      recipe: init
      params:
        ms: =recipe.ms
        basedir: 'output/{recipe.obs}'
        nthreads-dask: =recipe.nthreads-dask
        nvthreads: =recipe.nvthreads
        data-column: =recipe.data-column
        weight-column: =recipe.weight-column
        flag-column: =recipe.flag-column


em_spotless:
  info: Loop over em_steps

  for_loop:
    var: iter
    over: iters

  inputs:
    basedir:
      required: true
    obs:
      choices: ['F000', 'F001', 'F005', 'F01']
      required: true
    iters:
      dtype: List[int]
      default: [0,1,2,3,4,5,6,7]
      info:
        List enumerating number of EM steps to perform
    data-column:
      default: DATA
    weight-column:
      default: None
    flag-column:
      default: FLAG
    cell-size:
      dtype: float
      info: 'cell size in arcseconds'
    nx:
      dtype: int
      info: 'number of pixels in x direction'
    ny:
      dtype: int
      info: 'number of pixels in y direction'
    super-resolution-factor:
      dtype: float
      default: 2.0
    field-of-view:
      dtype: float
      default: 3.0
    rmsfactor:
      dtype: float
      default: 0.65
      info: 'thresholding factor'
    robustness:
      dtype: float
      default: -0.5
      info: 'robustness factor for briggs weighting'
    nthreads-dask:
      dtype: int
      default: 4
      aliases: ['*.nthreads-dask']  # does not work. Bug in for loop?
    nvthreads:
      dtype: int
      default: 2
      aliases: ['*.nvthreads']
    nband:
      dtype: int
      default: 4
      aliases: ['*.nband']
    tol:
      dtype: float
      default: 1e-4

  steps:
    grid:
      cab: pfb.grid
      assign:
        previous-iter: =recipe.iter - 1
        model-name: '{recipe.basedir}/{recipe.obs}/data_I_{recipe.previous-iter}_model.mds'
      params:
        xds: '{recipe.basedir}/{recipe.obs}/data_I.xds'
        super-resolution-factor: =recipe.super-resolution-factor
        field-of-view: =recipe.field-of-view
        robustness: =recipe.robustness
        overwrite: true
        residual: =IF(recipe.iter==0, false, true)  # Don't try to compute residual at first iteration
        l2reweight-dof: =IF(recipe.iter==0, 0, 5)  # Don't reweight at first iteration
        postfix: =recipe.iter
        nthreads-dask: =recipe.nthreads-dask
        transfer-model-from: =IF(recipe.iter==0, '', '{recipe.model-name}')
        output-filename: '{recipe.basedir}/{recipe.obs}/spotless'
        log-directory: '{recipe.basedir}/{recipe.obs}/logs'

    spotless:
      cab: pfb.spotless
      params:
        rmsfactor: =recipe.rmsfactor
        niter: =IF(recipe.iter==0, 30, 15)
        tol: =recipe.tol
        l1reweight-from: =IF(recipe.iter==0, 10, 5)
        pd-tol: 1e-4
        pd-report-freq: 50
        # bases: ['self','db1','db2']
        nlevels: 3
        memory-greedy: true
        postfix: =recipe.iter
        nthreads-dask: =recipe.nthreads-dask
        output-filename: '{recipe.basedir}/{recipe.obs}/spotless'
        log-directory: '{recipe.basedir}/{recipe.obs}/logs'

    model2comps:
      cab: pfb.model2comps
      params:
        nbasisf: 4
        overwrite: true
        postfix: =recipe.iter
        output-filename: '{recipe.basedir}/{recipe.obs}/spotless'
        log-directory: '{recipe.basedir}/{recipe.obs}/logs'


em_clean:
  info: Loop over em_steps

  for_loop:
    var: iter
    over: iters

  inputs:
    basedir:
      required: true
    obs:
      choices: ['F000', 'F001', 'F005', 'F01']
      required: true
    iters:
      dtype: List[int]
      default: [0,1,2,3,4,5,6,7]
      info:
        List enumerating number of EM steps to perform
    data-column:
      default: DATA
    weight-column:
      default: None
    flag-column:
      default: FLAG
    cell-size:
      dtype: float
      info: 'cell size in arcseconds'
    nx:
      dtype: int
      info: 'number of pixels in x direction'
    ny:
      dtype: int
      info: 'number of pixels in y direction'
    super-resolution-factor:
      dtype: float
      default: 2.0
    field-of-view:
      dtype: float
      default: 3.0
    sigmathreshold:
      dtype: float
      default: 2.0
      info: 'multiple of rms used to set stopping threshold'
    gamma:
      dtype: float
      default: 0.1
      info: 'Minor loop gain'
    robustness:
      dtype: float
      default: -0.5
      info: 'robustness factor for briggs weighting'
    nthreads-dask:
      dtype: int
      default: 4
      aliases: ['*.nthreads-dask']  # does not work. Bug in for loop?
    nvthreads:
      dtype: int
      default: 2
      aliases: ['*.nvthreads']
    nband:
      dtype: int
      default: 4
      aliases: ['*.nband']
    tol:
      dtype: float
      default: 1e-4

  steps:
    grid:
      cab: pfb.grid
      assign:
        previous-iter: =recipe.iter - 1
        model-name: '{recipe.basedir}/{recipe.obs}/data_I_{recipe.previous-iter}_model.mds'
      params:
        xds: '{recipe.basedir}/{recipe.obs}/data_I.xds'
        super-resolution-factor: =recipe.super-resolution-factor
        field-of-view: =recipe.field-of-view
        robustness: =recipe.robustness
        overwrite: true
        residual: =IF(recipe.iter==0, false, true)  # Don't try to compute residual at first iteration
        l2reweight-dof: =IF(recipe.iter==0, 0, 5)  # Don't reweight at first iteration
        postfix: =recipe.iter
        nthreads-dask: =recipe.nthreads-dask
        transfer-model-from: =IF(recipe.iter==0, '', '{recipe.model-name}')
        output-filename: '{recipe.basedir}/{recipe.obs}/clean'
        log-directory: '{recipe.basedir}/{recipe.obs}/logs'

    clean:
      cab: pfb.clean
      params:
        nmiter: =IF(recipe.iter==0, 30, 15)
        sigmathreshold: =recipe.sigmathreshold
        memory-greedy: true
        postfix: =recipe.iter
        mop-flux: false
        nthreads-dask: =recipe.nthreads-dask
        output-filename: '{recipe.basedir}/{recipe.obs}/clean'
        log-directory: '{recipe.basedir}/{recipe.obs}/logs'

    model2comps:
      cab: pfb.model2comps
      params:
        nbasisf: 4
        overwrite: true
        postfix: =recipe.iter
        output-filename: '{recipe.basedir}/{recipe.obs}/clean'
        log-directory: '{recipe.basedir}/{recipe.obs}/logs'
