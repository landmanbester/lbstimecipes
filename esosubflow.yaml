_include:
  - lb-cabs.yaml

opts:
  log:
    dir: logs
    nest: 2


crosscal:
  name: CROSSCAL
  info:
    Subset of the ESO137 cross calibration and diagnostics recipe.
    This recipe just test interoperability between qcal and pfb.

  inputs:
    ms_primary:
      dtype: str
      required: true
      abbreviation: msp
    ms_target:
      dtype: str
      required: true
      abbreviation: mst
    basedir:
      default: 'out'
    data_column:
      default: DATA
      aliases: ['*.input_ms.data_column']
    sigma_column:
      default: SIGMA_SPECTRUM
      aliases: ['*.input_ms.sigma_column']
      info: Original std of noise used to construct weights
    weight_column:
      default: WEIGHT_SPECTRUM
      info: Modified weights to be writtent to this column
    model_column:
      dtype: str
      default: MODEL_DATA
    nthreads:
      dtype: int
      default: 16
    nband:
      default: 2
      aliases: ['*.nband']
      info: Number of imaging bands
    scheduler:
      dtype: str
      default: distributed
      aliases: ['*.scheduler']
      info: Dask scheduler to use
    fits_cubes:
      default: false
      aliases: ['*.fits_cubes']
    fits_mfs:
      default: false
      aliases: ['*.fits_mfs']


  steps:
    kgb:
      cab: quartical
      info: DGKB on the primary where
            D = a global delay,
            G = time variable complex gain,
            K = per scan delay refinement
            B = frequency variable complex gain (bandpass)
      params:
        input_ms.path: '{recipe.basedir}/{recipe.ms_primary}'
        input_ms.time_chunk: '0'
        input_ms.freq_chunk: '0'
        input_ms.select_uv_range: [150,0]
        input_ms.group_by: [SCAN_NUMBER,FIELD_ID,DATA_DESC_ID]
        input_ms.select_corr: [0, 3]
        input_model.recipe: '{recipe.model_column}'
        input_model.apply_p_jones: false
        solver.terms: [D,G,K,B]
        solver.iter_recipe: [0,25,25,50,0,15,15,30,0,5,5,10]
        solver.propagate_flags: true
        solver.robust: true
        solver.reweighting_flag_threshold: 0.25
        solver.threads: 4
        solver.reference_antenna: 57
        output.gain_directory: '{recipe.basedir}/kgb.qc'
        output.log_directory: '/home/bester/projects/ESO137'
        output.overwrite: true
        output.products:
        output.columns:
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gain: false
        mad_flags.enable: false
        dask.threads: 4
        dask.scheduler: distributed
        D.type: delay
        D.time_interval: 0
        D.freq_interval: 0
        D.respect_scan_boundaries: false
        G.type: complex
        G.time_interval: 2
        G.freq_interval: 0
        K.type: delay
        K.time_interval: 0
        K.freq_interval: 0
        K.initial_estimate: false
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 2
        B.respect_scan_boundaries: false

    transfer:
      cab: quartical
      info: "Transfer gains to the targer"
      params:
        input_ms.path: '{recipe.basedir}/{recipe.ms_target}'
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 64
        input_ms.group_by: [SCAN_NUMBER,FIELD_ID,DATA_DESC_ID]
        input_ms.select_corr: [0, 3]
        input_model.recipe: DATA   # MODEL_DATA may not exist at this stage
        input_model.apply_p_jones: false
        solver.terms: [D,G,K,B]
        solver.iter_recipe: [0,0,0,0]
        solver.propagate_flags: true
        solver.robust: false
        solver.threads: 1
        solver.reference_antenna: 57
        output.gain_directory: '{recipe.basedir}/target_gains_init.qc'
        output.log_directory: '/home/bester/projects/ESO137'
        output.overwrite: true
        output.products:
        output.columns:
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gain: true
        mad_flags.enable: false
        dask.threads: '{recipe.nthreads}'
        dask.scheduler: threads
        D.type: delay
        D.load_from: '{recipe.basedir}/kgb.qc/D'
        D.interp_method: 2dlinear
        D.interp_mode: ampphase
        D.time_interval: 0
        D.freq_interval: 0
        D.respect_scan_boundaries: false
        D.initial_estimate: false
        G.type: complex
        G.load_from: '{recipe.basedir}/kgb.qc/G'
        G.interp_method: 2dlinear
        G.interp_mode: ampphase
        G.time_interval: 1
        G.freq_interval: 0
        K.type: delay
        K.load_from: '{recipe.basedir}/kgb.qc/K'
        K.interp_method: 2dlinear
        K.interp_mode: ampphase
        K.time_interval: 0
        K.freq_interval: 0
        K.initial_estimate: false
        B.type: complex
        B.load_from: '{recipe.basedir}/kgb.qc/B'
        B.interp_method: 2dlinear
        B.interp_mode: ampphase
        B.time_interval: 0
        B.freq_interval: 1
        B.respect_scan_boundaries: false

    init1:
      cab: pfb.init
      info: 'Initialise imaging data products'
      params:
        ms: '{recipe.basedir}/{recipe.ms_target}'
        output_filename: '{recipe.basedir}/stage1'
        data_column: DATA
        sigma_column: SIGMA_SPECTRUM
        gain_table: '{recipe.basedir}/target_gains_init.qc/'
        gain_term: NET
        utimes_per_chunk: 50
        nthreads: '{recipe.nthreads}'

    grid1:
      cab: pfb.grid
      info: 'Grid data for initial imaging'
      params:
        output_filename: '{recipe.basedir}/stage1'
        robustness: -1
        fits_cubes: true
        residual: false
        field_of_view: 2.5
        super_resolution_factor: 1.5
        nthreads: '{recipe.nthreads}'

    fwdbwd1:
      cab: pfb.fwdbwd
      info: Forward backward steps with mask defined by clean1
      params:
        output_filename: '{recipe.basedir}/stage1'
        niter: 5
        sigma21: 1e-5
        alpha: 1e-5
        nthreads: '{recipe.nthreads}'

    degrid1:
      cab: pfb.degrid
      info: Populate MODEL_DATA with model visibilities
      params:
        ms: '{recipe.basedir}/{recipe.ms_target}'
        output_filename: '{recipe.basedir}/stage1'
        nband_out: 8
        spectral_poly_order: 2
        nthreads: '{recipe.nthreads}'

    selfcal1:
      cab: quartical
      info: First round of selfcal
      params:
        input_ms.path: '{recipe.basedir}/{recipe.ms_target}'
        input_ms.time_chunk: 4
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [0, 150]
        input_ms.group_by: [SCAN_NUMBER,FIELD_ID,DATA_DESC_ID]
        input_ms.select_corr: [0, 3]
        input_model.recipe: '{recipe.model_column}'
        input_model.apply_p_jones: false
        solver.terms: [G,K]
        solver.iter_recipe: [0,40,0,20,0,10,0,5]
        solver.propagate_flags: true
        solver.robust: true
        solver.reweighting_flag_threshold: 0.01
        solver.threads: 1
        solver.reference_antenna: 57
        output.gain_directory: '{recipe.basedir}/target_gains_stage1.qc'
        output.log_directory: '/home/bester/projects/ESO137'
        output.overwrite: true
        output.products: [residual]
        output.columns: [RESIDUAL]
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gain: true
        mad_flags.enable: false
        dask.threads: '{recipe.nthreads}'
        G.type: complex
        G.load_from: '{recipe.basedir}/target_gains_init.qc/NET'
        G.interp_method: 2dlinear
        G.interp_mode: ampphase
        G.time_interval: 1
        G.freq_interval: 0
        K.type: delay
        K.load_from:
        K.interp_method: 2dlinear
        K.interp_mode: ampphase
        K.time_interval: 4
        K.freq_interval: 0
        K.initial_estimate: false

    init2:
      cab: pfb.init
      info: 'Initialise imaging data products after first selfcal round'
      params:
        ms: '{recipe.basedir}/{recipe.ms_target}'
        output_filename: '{recipe.basedir}/stage2'
        data_column: DATA
        sigma_column: SIGMA_SPECTRUM
        gain_table: '{recipe.basedir}/target_gains_stage1.qc/'
        gain_term: NET
        utimes_per_chunk: 50
        nthreads: '{recipe.nthreads}'

    grid2:
      cab: pfb.grid
      info: 'Grid data for stage 2 imaging'
      params:
        output_filename: '{recipe.basedir}/stage2'
        robustness: -1
        fits_cubes: false
        fits_mfs: false
        residual: false
        field_of_view: 2.5
        super_resolution_factor: 1.5

