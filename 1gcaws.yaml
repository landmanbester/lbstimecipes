_include:
  - kubeconfig.yaml
  - (cultcargo)quartical.yml
  - (cultcargo)pfb-clean.yml

opts:
  backend:
    kube:
      enable: true
    select: kube

1gc:
  name: CROSSCAL
  info: Demo crosscal on AWS

  inputs:
    ms_primary:
      dtype: str
      required: true
      abbreviation: msp
    ms_target:
      dtype: str
      required: true
      abbreviation: mst
    basedir:
      dtype: str
      required: true
    gain_dir:
      dtype: str
      required: true
    data_column:
      default: DATA
      aliases: ['*.input_ms.data_column']
    sigma_column:
      default: SIGMA_SPECTRUM
      aliases: ['*.input_ms.sigma_column']
      info: Original std of noise used to construct weights
    weight_column:
      default: WEIGHT_SPECTRUM
      info: Modified weights to be writtent to this column
    model_column:
      dtype: str
      default: MODEL_DATA
    nvthreads:
      dtype: int
      default: 16
    nthreads_dask:
      dtype: int
      default: 1
    nband:
      dtype: int
      default: 8
      aliases: ['*.nband']
      info: Number of imaging bands
    channels_per_image:
      default: 256
    integrations_per_image:
      default: 150

  steps:
    init:
      cab: pfb.init
      info: Initialise Stokes data products
      backend:
        kube:
          # debug_mode: true
          job_pod:  # This is where the main aplication runs.
            type: medium
            memory:
              limit: 16Gi
            cpu:
              request: 4
          dask_cluster:  # Set up the dask cluster.
            name: pfb-test-cluster
            num_workers: 16  # Zero will disable cluster.
            threads_per_worker: 1
            worker_pod:
              type: medium
              cpu:
                request: 15
              memory:
                  limit: "55Gi"
          always_pull_images: true
      params:
        ms: '{recipe.ms_target}'
        output_filename: '{recipe.basedir}/stage1'
        data_column: =recipe.data_column
        sigma_column: =recipe.sigma_column
        gain_table: =recipe.gain_dir
        gain_term: 'GK-net'
        integrations_per_image: =recipe.integrations_per_image
        channels_per_image: =recipe.channels_per_image
        nvthreads: 15
        nthreads_dask: 1
        nworkers: 16
        scheduler: distributed
        overwrite: true
        log_directory: =recipe.basedir
        chan_average: 4

    grid:
      cab: pfb.grid
      info: Initialise image data products
      backend:
        kube:
          # debug_mode: true
          job_pod:  # This is where the main aplpication runs.
            type: thin
            memory:
              limit: 6Gi
            cpu:
              limit: 1
          dask_cluster:  # Set up the dask cluster.
            name: pfb-test-cluster
            num_workers: 16  # Zero will disable cluster.
            threads_per_worker: 1
            worker_pod:
              type: medium
              cpu:
                limit: 15
              memory:
                  limit: "55Gi"
          always_pull_images: true
      params:
        output_filename: '{recipe.basedir}/stage1'
        nband: 16
        nvthreads: 15
        nthreads_dask: 1
        nworkers: 16
        scheduler: distributed
        overwrite: true
        concat_row: true
        robustness: 0.0
        field_of_view: 2.5
        super_resolution_factor: 2.0
        log_directory: =recipe.basedir

    deconv:
      cab: pfb.spotless
      info: Deconvolve image with spotless algorithm
      backend:
        kube:
          # debug_mode: true
          job_pod:  # This is where the main aplpication runs.
            type: fat
            # memory:
            #   limit: "500Gi"
            # cpu:
            #   limit:
          dask_cluster:  # Set up the dask cluster.
            name: pfb-test-cluster
            num_workers: 0  # Zero will disable cluster.
            threads_per_worker: 1
            worker_pod:
              type: medium
              cpu:
                limit: 15
              memory:
                  limit: "55Gi"
          always_pull_images: true
      params:
        output_filename: '{recipe.basedir}/stage1'
        log_directory: =recipe.basedir
        fits_cubes: true
        niter: 10
        bases: 'self,db1,db2,db3'
        nlevels: 5
        l1reweight_from: 5
        pd_tol: 1e-3
        pd_maxit: 500
        pd_verbose: 2
        pd_report_freq: 50
        tol: 5e-3
        pm_tol: 1e-3
        scheduler: threads
        nthreads_dask: 16
        nvthreads: 4
        nband: 16
        memory_greedy: true
        rmsfactor: 1.0
        positivity: 2



    # restore_flag:
    #   cab: quartical-restore
    #   backend:
    #     kube:
    #       job_pod:  # This is where the main aplpication runs.
    #         type: thin
    #         memory:
    #           limit: 6Gi
    #         cpu:
    #           limit: 1
    #       dask_cluster:  # Set up the dask cluster.
    #         name: qc-test-cluster
    #         num_workers: 0  # Zero will disable cluster.
    #         threads_per_worker: 4
    #         worker_pod:
    #           type: thin
    #           cpu:
    #             limit: 4
    #           memory:
    #               limit: "16Gi"
    #       always_pull_images: true
    #   info: Restore flags from QuartiCal backup
    #   params:
    #     zarr_path: s3://ratt-public-data/ESO137/ms1_primary.bkp/flautos-ms1_primary.zarr-FLAG.bkp.qc
    #     ms_path: s3://ratt-public-data/ESO137/ms1_primary.zarr
    #     column_name: FLAG

    # restore_flag_row:
    #   cab: quartical-restore
    #   backend:
    #     kube:
    #       job_pod:  # This is where the main aplpication runs.
    #         type: thin
    #         memory:
    #           limit: 6Gi
    #         cpu:
    #           limit: 1
    #       dask_cluster:  # Set up the dask cluster.
    #         name: qc-test-cluster
    #         num_workers: 0  # Zero will disable cluster.
    #         threads_per_worker: 4
    #         worker_pod:
    #           type: thin
    #           cpu:
    #             limit: 4
    #           memory:
    #               limit: "16Gi"
    #       always_pull_images: true
    #   info: Restore flags from QuartiCal backup
    #   params:
    #     zarr_path: s3://ratt-public-data/ESO137/ms1_primary.bkp/flautos-ms1_primary.zarr-FLAG_ROW.bkp.qc
    #     ms_path: s3://ratt-public-data/ESO137/ms1_primary.zarr
    #     column_name: FLAG_ROW

    # gkb1:
    #   cab: quartical
    #   backend:
    #     kube:
    #       job_pod:  # This is where the main aplpication runs.
    #         type: thin
    #         memory:
    #           limit: 6Gi
    #         cpu:
    #           limit: 1
    #       dask_cluster:  # Set up the dask cluster.
    #         name: qc-test-cluster
    #         num_workers: 4  # Zero will disable cluster.
    #         threads_per_worker: 4
    #         worker_pod:
    #           type: thin
    #           cpu:
    #             limit: 4
    #           memory:
    #               limit: "16Gi"
    #       always_pull_images: true
    #   info: GKB on the primary where
    #         G = time variable complex gain,  G(t)
    #         K = per scan delay refinement  exp(i delta(t) nu)
    #         B = frequency variable complex gain (bandpass)  B(nu)
    #   params:
    #     input_ms.path: '{recipe.ms_primary}'
    #     input_ms.time_chunk: '0'
    #     input_ms.freq_chunk: '0'
    #     input_ms.select_uv_range: [150,0]
    #     input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
    #     input_ms.select_corr: [0, 3]
    #     input_model.recipe: '{recipe.model_column}'
    #     input_model.apply_p_jones: false
    #     solver.terms: [G,K,B]
    #     solver.iter_recipe: [100,100,250,50,50,50,30,30,30,10,10,10,5,5,5]
    #     solver.propagate_flags: false
    #     solver.robust: true
    #     solver.threads: 8
    #     solver.reference_antenna: 43
    #     output.gain_directory: '{recipe.basedir}/gkb1.qc'
    #     output.log_directory: '{recipe.basedir}/logs.qc'
    #     output.overwrite: false
    #     output.products:
    #     output.columns:
    #     output.flags: false
    #     output.apply_p_jones_inv: false
    #     output.net_gains: []
    #     mad_flags.enable: false
    #     dask.threads: 8
    #     dask.workers: 8
    #     dask.scheduler: distributed
    #     G.type: diag_complex
    #     G.time_interval: 0
    #     G.freq_interval: 0
    #     K.type: delay
    #     K.time_interval: 0
    #     K.freq_interval: 0
    #     K.initial_estimate: true
    #     B.type: diag_complex
    #     B.time_interval: 0
    #     B.freq_interval: 16

    # bsmooth:
    #   cab: bsmooth
    #   info: Smooth weighted average bandpass solutions
    #   params:
    #     gain_dir: '{recipe.basedir}/gkb1.qc/'  # result placed in smoothed.qc inside this folder
    #     gain_term: B
    #     reject_amp_thresh: 5.5
    #     reject_phase_thresh: 55.5
    #     do_plots: true
    #     nthreads: =recipe.nthreads
    #     ref_ant: 43
    #     dof0: 2.0
    #     nreweight: 10
    #     sigman_min: 0.005

# command:
# pfb init --ms s3://ratt-public-data/ESO137/ms2_target.zarr -o s3://rarg-test-binface/pfb-test/test --nthreads-dask 15 --nvthreads 1 --scheduler distributed --integrations-per-image 150 --channels-per-image 64 --nworkers 2 --overwrite --data-column DATA --sigma-column SIGMA_SPECTRUM
# gain table not currently accessible
# --gain-table s3://ratt-public-data/ESO137/ms2_gains.qc --gain-term GK-net
